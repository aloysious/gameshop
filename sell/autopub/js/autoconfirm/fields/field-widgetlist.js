YUI.add('field-widgetlist', function(Y) {		Y.namespace('Field');	var F = Y.Field,		Lang = Y.Lang,        trim = Lang.trim;    /**     * ----------------------------------------------------------------------------------------     *                                   WidgetList 控件列表     * ----------------------------------------------------------------------------------------     */        /**	 * 控件列表逻辑	 * @class WidgetList	 * @name WidgetList	 * @memberof I	 * @type object	 * @public	 */    F.WidgetList = {                /**		 * 初始化控件列表		 * @name initList		 * @memberof F.WidgetList         * @param list {Node} 控件列表 Node节点		 * @type function		 * @public		 */        initList: function(list, name) {			list.name = name;            list.widgets = {};            this.initWidgets(list);            this.initWidgetLinkage(list);        },                /**		 * 初始化所有控件		 * @name initWidgets		 * @memberof F.WidgetList         * @param list {Node} 控件列表 Node节点		 * @type function		 * @public		 */        initWidgets: function(list) {            var widgetItems = list.all('.widget-item'),                name = '',                type = '';                            widgetItems.each(function(node) {                name = node.getAttribute('widget');                type = node.getAttribute('type');                if (name) {                    //Node节点、类型、名字                    list.widgets[name] = {                        node: node,                        type: type,                        name: name,						list: list                    };                                        //填充初始值                    if (window['FORM_INIT_DATA']) {                        F.WidgetLang.initVal(list.widgets[name], window['FORM_INIT_DATA']);                    }                    //先初始化类型                    if (F.Widgets[type] && F.Widgets[type].init) {                        F.Widgets[type].init(list.widgets[name]);                    }                    //后初始化特例                    if (F.Widgets[name] && F.Widgets[name].init) {                        F.Widgets[name].init(list.widgets[name]);                    }										F.WidgetLang.setLinkage(list.widgets[name]);                }            });        },                /**		 * 初始化控件间的联动		 * @name initWidgetLinkage		 * @memberof F.WidgetList         * @param list {Node} 控件列表 Node节点		 * @type function		 * @public		 */        initWidgetLinkage: function(list) {            var widgets = list.widgets;                        //身份证、出生日期及性别联动            if (widgets['card'] && (widgets['birthday'] || widgets['sex'])) {                F.Linkage.setIDCardLinkage(list);            }                    },                /**		 * 获取控件列表的显示值		 * @name getWidgetListText		 * @memberof F.WidgetList         * @param list {Node} 控件列表 Node节点		 * @type function		 * @public		 */        getWidgetListText: function(list) {            var widgets = list.widgets,                data = {};                        Y.Object.each(widgets, function(v, k) {                data[k] = F.WidgetLang.getText(v);            });                        return data;        }    };	}, '0.0.1', {	requires: ['node', 'event', 'event-delegate']});