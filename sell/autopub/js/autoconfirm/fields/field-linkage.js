YUI.add('field-linkage', function(Y) {		Y.namespace('Field');	var F = Y.Field,		Lang = Y.Lang,        trim = Lang.trim;	    /**     * ----------------------------------------------------------------------------------------     *                                   Linkage 控件联动     * ----------------------------------------------------------------------------------------     */        /**	 * 表单联动	 * @class Linkage	 * @name Linkage	 * @memberof I	 * @type object	 * @public	 */    F.Linkage = {                /**		 * 同步模块联动内容		 * @name syncModLinkageVal		 * @memberof F.Linkage	         * @param hw {Object} 投保人 widget         * @param iw {Object} 被保人 widget		 * @type function		 * @public		 */        syncModLinkageVal: function(hw, iw) {            //同步投保人信息            Y.Object.each(hw, function(hwidget, name) {                var iwidget = iw[name];                                if (iwidget) {                    F.WidgetLang.setVal(iwidget, F.WidgetLang.getVal(hwidget));                }            });        },                /**		 * 设置身份证日期性别联动		 * @name setIDCardLinkage		 * @memberof F.Linkage         * @param list {Node} 证件控件 Node节点		 * @type function		 * @public		 */        setIDCardLinkage: function(list) {            var that = this,                widgets = list.widgets,                cardNode = widgets['card']['node'],                cardNo = cardNode.one('input');                                cardNo.on('valueChange', function(e) {                that.syncIDCardLinkageVal(list);            });            cardNo.on('blur', function(e) {                that.syncIDCardLinkageVal(list);            });						//F.Widgets['card'].hideRelWidget(widgets['card']);        },                /**		 * 同步身份证日期性别联动		 * @name syncIDCardLinkageVal		 * @memberof F.Linkage		         * @param list {Node} 证件控件 Node节点		 * @type function		 * @public		 */        syncIDCardLinkageVal: function(list) {            var widgets = list.widgets,                card = widgets['card'],                birthday = widgets['birthday'],                sex = widgets['sex'],                cardVal = F.WidgetLang.getVal(card),                v = cardVal['no'];                        //如果不是身份证，返回            if (cardVal.type != '1') { return; }                        //如果是15位，则换算成18位            if (v.length == 15) {                v = v.slice(0, 6) + '19' + v.slice(6) + '1';            }            //如果是18位            if (v.length == 18) {                var _Y = v.slice(6, 10),                    _M = parseInt(v.slice(10, 12), 10) + '',                    _D = parseInt(v.slice(12, 14), 10) + '';                //重新渲染日期控件                if (birthday) {                    F.WidgetLang.setVal(birthday, {                        year: _Y,                        month: _M,                        day: _D                    });                }                //选中性别                if (sex) {                    if (v.slice(-2, -1) % 2 == 0) {                        //女性                        sex['node'].all('input').item(1).set('checked', true);                    } else {                        //男性                        sex['node'].all('input').item(0).set('checked', true);                    }                }            }        }    };}, '0.0.1', {	requires: ['node', 'event']});