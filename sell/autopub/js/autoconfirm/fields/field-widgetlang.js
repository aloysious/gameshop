YUI.add('field-widgetlang', function(Y) {		Y.namespace('Field');	var F = Y.Field,		Lang = Y.Lang,        trim = Lang.trim;    /**     * ----------------------------------------------------------------------------------------     *                                   WidgetLang 控件通用方法统一接口     * ----------------------------------------------------------------------------------------     */        /**	 * 控件通用方法统一接口	 * @class WidgetLang	 * @name WidgetLang	 * @memberof I	 * @type object	 * @public	 */    F.WidgetLang = {                /**		 * 方法适配		 * @name _batch		 * @memberof F.WidgetLang		 * @type function		 * @private		 */        _batch: function() {            var args = arguments,                method = args[0],                bindArgs = Array.prototype.slice.call(args, 1),                widget = bindArgs[0],                type = widget['type'],                name = widget['name'];                        if (F.Widgets[name] && F.Widgets[name][method]) {                return F.Widgets[name][method].apply(F.Widgets[name], bindArgs);            } else if (F.Widgets[type] && F.Widgets[type][method]) {                return F.Widgets[type][method].apply(F.Widgets[type], bindArgs);            } else {                return F.Widgets['def'][method].apply(F.Widgets['def'], bindArgs);            }        },                /**		 * 获取控件值		 * @name getVal		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象		 * @type function		 * @public		 */        getVal: function(widget) {            return this._batch('getVal', widget);        },                /**		 * 设置控件值		 * @name setVal		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象         * @param val {String | Array | Object} 需要设置的值		 * @type function		 * @public		 */        setVal: function(widget, val) {            return this._batch('setVal', widget, val);        },                /**		 * 设置联动		 * @name setLinkage		 * @memberof F.WidgetLang         * @param a {Object} 控件对象 a         * @param b {Object} 控件对象 b		 * @type function		 * @public		 */        setLinkage: function(a, b) {            return this._batch('setLinkage', a, b);        },                /**		 * 获取显示文本		 * @name getText		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象		 * @type function		 * @public		 */        getText: function(widget) {            return this._batch('getText', widget);        },                /**		 * 初始化值		 * @name initVal		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象         * @param data {Object} 值对象		 * @type function		 * @public		 */        initVal: function(widget, data) {            return this._batch('initVal', widget, data);        },				/**		 * 重置值（置空）		 * @name reset		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象		 * @type function		 * @public		 */        reset: function(widget) {            return this._batch('reset', widget);        },				/**		 * 将控件里的表单元素的值转换成getVal返回的格式（For setVal）		 * @name parseElVal		 * @memberof F.WidgetLang         * @param widget {Object} 控件对象		 * @type function		 * @public		 */		parseElVal: function(widget) {            return this._batch('parseElVal', widget);        }    };	}, '0.0.1', {	requires: ['node', 'event', 'event-delegate']});